//C++
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        sort(intervals.begin(),intervals.end());
        
        vector<vector<int>> ans;
        int i=0;
        while(i<n) {
            int start = intervals[i][0];
            int end = intervals[i][1];
            i+=1;
            while(i<n and end>=intervals[i][0]) {
                end = max(end,intervals[i][1]);
                i+=1;
            }
            vector<int> temp;
            temp.push_back(start);
            temp.push_back(end);
            ans.push_back(temp);
        }
        return ans;
    }
};

//JAVA
import java.util.*;

class Solution {
    public List<List<Integer>> merge(List<List<Integer>> intervals) {
        int n = intervals.size();
        intervals.sort((a, b) -> Integer.compare(a.get(0), b.get(0)));

        List<List<Integer>> ans = new ArrayList<>();
        int i = 0;

        while (i < n) {
            int start = intervals.get(i).get(0);
            int end = intervals.get(i).get(1);
            i++;

            while (i < n && end >= intervals.get(i).get(0)) {
                end = Math.max(end, intervals.get(i).get(1));
                i++;
            }

            List<Integer> temp = new ArrayList<>();
            temp.add(start);
            temp.add(end);
            ans.add(temp);
        }

        return ans;
    }
}

//PYTHON
class Solution:
    def merge(self, intervals):
        intervals.sort(key=lambda x: x[0])

        ans = []
        i = 0
        n = len(intervals)

        while i < n:
            start = intervals[i][0]
            end = intervals[i][1]
            i += 1

            while i < n and end >= intervals[i][0]:
                end = max(end, intervals[i][1])
                i += 1

            ans.append([start, end])

        return ans
