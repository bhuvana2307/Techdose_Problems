//C++
class Solution {
    double solve(vector<int>& nums1,int n,vector<int>& nums2,int m){
        if(n>m) return solve(nums2,m,nums1,n);//To make time=O(min(logN,logM))
        
        int low=0,high=n;
        while(low<=high){
            int partitionX=(low+high)/2;
            int partitionY=(m+n+1)/2-partitionX;
            
            int maxLeftX = partitionX==0?INT_MIN:nums1[partitionX-1];
            int minRightX = partitionX==n?INT_MAX:nums1[partitionX];
            
            int maxLeftY = partitionY==0?INT_MIN:nums2[partitionY-1];
            int minRightY = partitionY==m?INT_MAX:nums2[partitionY];
            
            //Case-1: Median found
            if(maxLeftX<=minRightY and maxLeftY<=minRightX){
                if((m+n)%2==0)
                    return (double(max(maxLeftX,maxLeftY)+double(min(minRightX,minRightY)))/2);
                else
                    return double(max(maxLeftX,maxLeftY));
            } else if(maxLeftX>minRightY)   //Move left
                high=partitionX-1;
            else    //Move right
                low=partitionX+1;
        }
        return double(0);
    }
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        return solve(nums1,nums1.size(),nums2,nums2.size());
    }
};

//Java
class Solution {
    private double solve(int[] nums1, int n, int[] nums2, int m) {
        if (n > m) {
            return solve(nums2, m, nums1, n); // Ensure nums1 is the smaller array
        }
        
        int low = 0, high = n;
        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (n + m + 1) / 2 - partitionX;
            
            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];
            int minRightX = (partitionX == n) ? Integer.MAX_VALUE : nums1[partitionX];
            
            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];
            int minRightY = (partitionY == m) ? Integer.MAX_VALUE : nums2[partitionY];
            
            if (maxLeftX <= minRightY && maxLeftY <= minRightX) { // Case 1: Median found
                if ((n + m) % 2 == 0) {
                    return ((double) Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;
                } else {
                    return (double) Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) { // Move left
                high = partitionX - 1;
            } else { // Move right
                low = partitionX + 1;
            }
        }
        return 0.0;
    }
    
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        return solve(nums1, nums1.length, nums2, nums2.length);
    }
}

//PYTHON
class Solution:
    def solve(self, nums1, n, nums2, m):
        if n > m:
            return self.solve(nums2, m, nums1, n)  # Ensure nums1 is the smaller array
        
        low, high = 0, n
        while low <= high:
            partitionX = (low + high) // 2
            partitionY = (n + m + 1) // 2 - partitionX
            
            maxLeftX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]
            minRightX = float('inf') if partitionX == n else nums1[partitionX]
            
            maxLeftY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]
            minRightY = float('inf') if partitionY == m else nums2[partitionY]
            
            if maxLeftX <= minRightY and maxLeftY <= minRightX:  # Case 1: Median found
                if (n + m) % 2 == 0:
                    return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2.0
                else:
                    return max(maxLeftX, maxLeftY)
            elif maxLeftX > minRightY:  # Move left
                high = partitionX - 1
            else:  # Move right
                low = partitionX + 1
        return 0.0
    
    def findMedianSortedArrays(self, nums1, nums2):
        return self.solve(nums1, len(nums1), nums2, len(nums2))

