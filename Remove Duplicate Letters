//C++
class Solution {
public:
    string removeDuplicateLetters(string s) {
        vector<int> freq(26,0);//Track last index of occurence for each element
        for(int i=0;i<s.size();++i)
            freq[s[i]-'a']++;
        
        stack<char> st;//Monotonic stack to maintain increasing order of chars
        vector<bool> seen(26,false);//Track already included elements
        for(int i=0;i<s.size();++i){
            if(seen[s[i]-'a']){//Don't process already included char
                freq[s[i]-'a']--;
                continue;
            }
            while(!st.empty() and st.top()>s[i] and freq[st.top()-'a']>0){//Pop all possible larger chars
                seen[st.top()-'a']=false;
                st.pop();
            }
            st.push(s[i]);
            seen[s[i]-'a']=true;
            freq[s[i]-'a']--;
        }
        string ans="";
        while(!st.empty()){//Build answer string
            ans.push_back(st.top());
            st.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

//Java
import java.util.Stack;

class Solution {
    public String removeDuplicateLetters(String s) {
        int[] freq = new int[26]; // Track frequency of each character
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

        Stack<Character> stack = new Stack<>(); // Monotonic stack
        boolean[] seen = new boolean[26]; // Track included characters

        for (char c : s.toCharArray()) {
            if (seen[c - 'a']) { // Skip already included characters
                freq[c - 'a']--;
                continue;
            }

            while (!stack.isEmpty() && stack.peek() > c && freq[stack.peek() - 'a'] > 0) { // Remove larger chars
                seen[stack.pop() - 'a'] = false;
            }

            stack.push(c);
            seen[c - 'a'] = true;
            freq[c - 'a']--;
        }

        StringBuilder result = new StringBuilder();
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.reverse().toString(); // Reverse for final result
    }
}

#Python
class Solution:
    def removeDuplicateLetters(self, s: str) -> str:
        freq = [0] * 26  # Track frequency of each character
        for char in s:
            freq[ord(char) - ord('a')] += 1

        stack = []  # Monotonic stack
        seen = [False] * 26  # Track included characters

        for char in s:
            if seen[ord(char) - ord('a')]:  # Skip already included characters
                freq[ord(char) - ord('a')] -= 1
                continue

            while stack and stack[-1] > char and freq[ord(stack[-1]) - ord('a')] > 0:  # Remove larger chars
                seen[ord(stack.pop()) - ord('a')] = False

            stack.append(char)
            seen[ord(char) - ord('a')] = True
            freq[ord(char) - ord('a')] -= 1

        return ''.join(stack)
