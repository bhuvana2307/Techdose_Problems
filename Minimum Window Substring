//C++
class Solution {
    #define SIZE 256+2
    bool equalFreq(vector<int>& curr,vector<int>& freq){//Check frequency of current window with freq(t)
        for(int i=0;i<SIZE;++i)
            if(freq[i]>0 and curr[i]<freq[i])
                return false;
        return true;
    }
public:
    string minWindow(string s, string t) {
        int n=s.size();
        if(n<t.size())
            return "";

        vector<int> freq(SIZE,0);
        for(char &c: t)//Find freq(t)
            freq[c]++;

        int l=0,r=0;//left and right pointers of sliding window
        int minWin = INT_MAX;
        string ans="";
        vector<int> curr(SIZE,0);
        
        while(r<n){ //run till end of string
            curr[s[r]]++;
            if(equalFreq(curr,freq)){//If we have all chars of t in our curr window
                do {    //move left ptr to as right as possible to minimize window size
                    curr[s[l]]--;
                    l++;
                }while(equalFreq(curr,freq));//Run until curr no more matches t
                if(minWin > r-l+2){//If curr window size is less than already know minWin size
                    minWin = r-l+2;
                    ans = s.substr(l-1,minWin);
                }
            }
            r++;
        }
        return ans;
    }
};

//JAVA
import java.util.*;

class Solution {
    private static final int SIZE = 256 + 2;

    // Helper method to check if current window matches the frequency of t
    private boolean equalFreq(int[] curr, int[] freq) {
        for (int i = 0; i < SIZE; i++) {
            if (freq[i] > 0 && curr[i] < freq[i]) {
                return false;
            }
        }
        return true;
    }

    public String minWindow(String s, String t) {
        int n = s.length();
        if (n < t.length()) {
            return "";
        }

        // Frequency array for t
        int[] freq = new int[SIZE];
        for (char c : t.toCharArray()) {
            freq[c]++;
        }

        int l = 0, r = 0;
        int minWin = Integer.MAX_VALUE;
        String ans = "";
        int[] curr = new int[SIZE];

        // Sliding window approach
        while (r < n) {
            curr[s.charAt(r)]++;
            if (equalFreq(curr, freq)) {
                // Move left pointer as right as possible to minimize window size
                while (equalFreq(curr, freq)) {
                    curr[s.charAt(l)]--;
                    l++;
                }
                // Check if we found a smaller window
                if (minWin > r - l + 2) {
                    minWin = r - l + 2;
                    ans = s.substring(l - 1, l - 1 + minWin);
                }
            }
            r++;
        }
        return ans;
    }
}

//Python
class Solution:
    SIZE = 256 + 2

    def equalFreq(self, curr, freq):
        for i in range(self.SIZE):
            if freq[i] > 0 and curr[i] < freq[i]:
                return False
        return True

    def minWindow(self, s: str, t: str) -> str:
        n = len(s)
        if n < len(t):
            return ""

        # Frequency array for t
        freq = [0] * self.SIZE
        for c in t:
            freq[ord(c)] += 1

        l, r = 0, 0
        minWin = float('inf')
        ans = ""
        curr = [0] * self.SIZE

        # Sliding window approach
        while r < n:
            curr[ord(s[r])] += 1
            if self.equalFreq(curr, freq):
                # Move left pointer as right as possible to minimize window size
                while self.equalFreq(curr, freq):
                    curr[ord(s[l])] -= 1
                    l += 1
                # Check if we found a smaller window
                if minWin > r - l + 2:
                    minWin = r - l + 2
                    ans = s[l-1:l-1+minWin]
            r += 1
        return ans


