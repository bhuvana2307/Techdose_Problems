#C++

class Solution {
public:
    vector<int> getModifiedArray(int length, vector<vector<int>>& updates) {
        vector<int> arr(length+1);
        for(auto v: updates){
            arr[v[0]]+=v[2];
            arr[v[1]+1]-=v[2];
        }
        for(int i=1;i<length;++i)
            arr[i]+=arr[i-1];
        arr.pop_back();
        return arr;
    }
};

#Java
class Solution {
    public int[] getModifiedArray(int length, int[][] updates) {
        int[] arr = new int[length + 1];
        
        for (int[] update : updates) {
            arr[update[0]] += update[2];
            if (update[1] + 1 < length) {
                arr[update[1] + 1] -= update[2];
            }
        }
        
        for (int i = 1; i < length; i++) {
            arr[i] += arr[i - 1];
        }
        
        // Return array without the extra last element
        return java.util.Arrays.copyOf(arr, length);
    }
}

#Python

class Solution:
    def getModifiedArray(self, length: int, updates: list[list[int]]) -> list[int]:
        arr = [0] * (length + 1)
        
        for update in updates:
            arr[update[0]] += update[2]
            if update[1] + 1 < length:
                arr[update[1] + 1] -= update[2]
        
        for i in range(1, length):
            arr[i] += arr[i - 1]
        
        # Remove the extra last element
        return arr[:-1]
