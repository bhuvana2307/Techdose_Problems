//C++
lass Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> pascals_triangle(numRows);

        for(int row=0;row<numRows;++row){
            pascals_triangle[row].resize(row+1);
            pascals_triangle[row][0] = pascals_triangle[row][row] = 1;//1st and last val
            for(int pos=1;pos<row;++pos)
                pascals_triangle[row][pos] = pascals_triangle[row-1][pos-1] + pascals_triangle[row-1][pos];
        }
        return pascals_triangle;
    }
};

//Java
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> pascalsTriangle = new ArrayList<>();

        for (int row = 0; row < numRows; row++) {
            List<Integer> currentRow = new ArrayList<>();
            for (int col = 0; col <= row; col++) {
                if (col == 0 || col == row) {
                    currentRow.add(1); // First and last element are always 1
                } else {
                    currentRow.add(pascalsTriangle.get(row - 1).get(col - 1) + pascalsTriangle.get(row - 1).get(col));
                }
            }
            pascalsTriangle.add(currentRow);
        }

        return pascalsTriangle;
    }
}

#Python
class Solution:
    def generate(self, numRows: int) -> list[list[int]]:
        pascals_triangle = []

        for row in range(numRows):
            current_row = [1] * (row + 1)  # Initialize the row with 1s
            for col in range(1, row):
                current_row[col] = pascals_triangle[row - 1][col - 1] + pascals_triangle[row - 1][col]
            pascals_triangle.append(current_row)

        return pascals_triangle
