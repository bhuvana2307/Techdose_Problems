//C++
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> lis;
        for(int i=0;i<n;++i){
            int lb = lower_bound(lis.begin(),lis.end(),nums[i])-lis.begin();
            if(lb==lis.size())
                lis.push_back(nums[i]);
            else
                lis[lb] = nums[i];
        }
        return lis.size();
    }
};

//Java
import java.util.*;

public class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        List<Integer> lis = new ArrayList<>();
        
        for (int i = 0; i < n; ++i) {
            int lb = Collections.binarySearch(lis, nums[i]);
            if (lb < 0) {
                lb = -lb - 1;  // Convert the negative index to the insertion point
            }
            
            if (lb == lis.size()) {
                lis.add(nums[i]);
            } else {
                lis.set(lb, nums[i]);
            }
        }
        
        return lis.size();
    }
}

#python
import bisect

class Solution:
    def lengthOfLIS(self, nums):
        lis = []
        for num in nums:
            lb = bisect.bisect_left(lis, num)
            if lb == len(lis):
                lis.append(num)
            else:
                lis[lb] = num
        return len(lis)
