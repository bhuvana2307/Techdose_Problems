//C++
class Solution {
public:
    vector<int> closestPrimes(int left, int right) {
        //Apply sieve of eratosthenes
        vector<bool> isPrime(right+1,true);
        for(int i=2;i*i<=right;++i){
            if(isPrime[i]==true){
                for(int j=2;i*j<=right;++j)
                    isPrime[i*j]=false;
            }
        }
        //Save all the primes in our range
        vector<int> primes;
        for(int i=max(2,left);i<=right;++i){
            if(isPrime[i]==true)
                primes.push_back(i);
        }
        //Now find the 2 closest primes
        int a=0,b=INT_MAX;
        for(int i=1;i<primes.size();++i){
            if((b-a)>(primes[i]-primes[i-1])){
                b = primes[i];
                a = primes[i-1];
            }
        }
        //Build your answer
        vector<int> ans;
        if(a==0)    ans = {-1,-1};
        else        ans = {a,b};
        return ans;
    }
};

//JAVA
import java.util.ArrayList;
import java.util.List;

class Solution {
    public int[] closestPrimes(int left, int right) {
        // Apply the sieve of Eratosthenes
        boolean[] isPrime = new boolean[right + 1];
        for (int i = 2; i <= right; i++) {
            isPrime[i] = true;
        }
        for (int i = 2; i * i <= right; i++) {
            if (isPrime[i]) {
                for (int j = 2; i * j <= right; j++) {
                    isPrime[i * j] = false;
                }
            }
        }

        // Save all the primes in the range
        List<Integer> primes = new ArrayList<>();
        for (int i = Math.max(2, left); i <= right; i++) {
            if (isPrime[i]) {
                primes.add(i);
            }
        }

        // Find the two closest primes
        int a = 0, b = Integer.MAX_VALUE;
        for (int i = 1; i < primes.size(); i++) {
            if ((b - a) > (primes.get(i) - primes.get(i - 1))) {
                b = primes.get(i);
                a = primes.get(i - 1);
            }
        }

        // Build the answer
        if (a == 0) {
            return new int[]{-1, -1};
        } else {
            return new int[]{a, b};
        }
    }
}

//Python
class Solution:
    def closestPrimes(self, left: int, right: int) -> list:
        # Apply the sieve of Eratosthenes
        is_prime = [True] * (right + 1)
        for i in range(2, int(right**0.5) + 1):
            if is_prime[i]:
                for j in range(2 * i, right + 1, i):
                    is_prime[j] = False

        # Save all the primes in the range
        primes = []
        for i in range(max(2, left), right + 1):
            if is_prime[i]:
                primes.append(i)

        # Find the two closest primes
        a, b = 0, float('inf')
        for i in range(1, len(primes)):
            if (b - a) > (primes[i] - primes[i - 1]):
                b = primes[i]
                a = primes[i - 1]

        # Build the answer
        if a == 0:
            return [-1, -1]
        else:
            return [a, b]

