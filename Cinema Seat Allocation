//C++
class Solution {
public:
    int maxNumberOfFamilies(int n, vector<vector<int>>& rseats) {
        rseats.push_back({0,10});
        rseats.push_back({n+1,1});
        sort(rseats.begin(),rseats.end());
        
        int size = rseats.size();
        int count = 0;
        int skipRows,skipCols;
        for(int i=1;i<size;++i){
            if(rseats[i][0]>rseats[i-1][0]){    //If the previous cross is not in same row as current cross
                skipRows = rseats[i][0] - rseats[i-1][0];//Count no of empty rows
                count += 2*(skipRows-1);    //Case-A: Add 2 count for each empty row

                if(rseats[i-1][1]==1)//case-F
                    count+=2;
                else if(rseats[i-1][1]<6)//Case-G
                    count+=1;

                if(rseats[i][1]==10)//Case-H
                    count+=2;
                else if(rseats[i][1]>5)//case-I
                    count+=1;
            } else {    //If the previous cross is in the same row as current cross
                if(rseats[i-1][1]==1 and rseats[i][1]==10)//Case-B
                    count+=2;
                else if(rseats[i-1][1]<4 and rseats[i][1]>7)//Case-C
                    count+=1;
                else if(rseats[i-1][1]==1 and rseats[i][1]>5)//Case-D
                    count+=1;
                else if(rseats[i-1][1]<6 and rseats[i][1]==10)//Case-E
                    count+=1;
            }
        }
        return count;
    }
};

//Java
import java.util.*;

class Solution {
    public int maxNumberOfFamilies(int n, int[][] rseats) {
        // Add sentinel values for boundary cases
        List<int[]> seats = new ArrayList<>(Arrays.asList(rseats));
        seats.add(new int[]{0, 10});
        seats.add(new int[]{n + 1, 1});

        // Sort the reserved seats by row and column
        Collections.sort(seats, (a, b) -> Integer.compare(a[0], b[0]));

        int count = 0;
        int size = seats.size();

        // Iterate through the reserved seats to process each row
        for (int i = 1; i < size; i++) {
            if (seats.get(i)[0] > seats.get(i - 1)[0]) { 
                // If the reserved seats are in different rows
                int skipRows = seats.get(i)[0] - seats.get(i - 1)[0]; 
                count += 2 * (skipRows - 1); // Each empty row can fit 2 families

                // Check for specific cases in the previous row and current row
                if (seats.get(i - 1)[1] == 1) count += 2; 
                else if (seats.get(i - 1)[1] < 6) count += 1; 
                if (seats.get(i)[1] == 10) count += 2; 
                else if (seats.get(i)[1] > 5) count += 1;
            } else {
                // If the reserved seats are in the same row
                if (seats.get(i - 1)[1] == 1 && seats.get(i)[1] == 10) count += 2;
                else if (seats.get(i - 1)[1] < 4 && seats.get(i)[1] > 7) count += 1;
                else if (seats.get(i - 1)[1] == 1 && seats.get(i)[1] > 5) count += 1;
                else if (seats.get(i - 1)[1] < 6 && seats.get(i)[1] == 10) count += 1;
            }
        }
        return count;
    }
}

//Python
class Solution:
    def maxNumberOfFamilies(self, n: int, rseats: list[list[int]]) -> int:
        # Add sentinel values for boundary cases
        rseats.append([0, 10])
        rseats.append([n + 1, 1])

        # Sort the reserved seats by row and column
        rseats.sort()

        count = 0
        size = len(rseats)

        # Iterate through the reserved seats to process each row
        for i in range(1, size):
            if rseats[i][0] > rseats[i - 1][0]:  # If the reserved seats are in different rows
                skipRows = rseats[i][0] - rseats[i - 1][0]
                count += 2 * (skipRows - 1)  # Each empty row can fit 2 families

                # Check for specific cases in the previous row and current row
                if rseats[i - 1][1] == 1: count += 2
                elif rseats[i - 1][1] < 6: count += 1
                if rseats[i][1] == 10: count += 2
                elif rseats[i][1] > 5: count += 1
            else:  # If the reserved seats are in the same row
                if rseats[i - 1][1] == 1 and rseats[i][1] == 10: count += 2
                elif rseats[i - 1][1] < 4 and rseats[i][1] > 7: count += 1
                elif rseats[i - 1][1] == 1 and rseats[i][1] > 5: count += 1
                elif rseats[i - 1][1] < 6 and rseats[i][1] == 10: count += 1

        return count
