//C++
#include <iostream>
#include <climits>
#include <vector>
using namespace std;

int mcm(const vector<int>& d, int l, int r, vector<vector<int>>& mem) {
    if (l >= r) {
        return 0;
    }
    if (mem[l][r] != -1) {
        return mem[l][r];
    }

    int res = INT_MAX;
    for (int k = l; k < r; k++) {
        int currCost = d[l - 1] * d[k] * d[r] + mcm(d, l, k, mem) + mcm(d, k + 1, r, mem);
        res = min(res, currCost);
    }
    
    mem[l][r] = res;
    return res;
}

int main() {
    vector<int> d = {10, 20, 30, 40, 30}; // Example matrix dimensions
    int n = d.size();
    vector<vector<int>> mem(n, vector<int>(n, -1));

    cout << "Minimum number of multiplications: " << mcm(d, 1, n - 1, mem) << endl;

    return 0;
}


//Java
public class MatrixChainMultiplication {
    
    public static int mcm(int[] d, int l, int r, int[][] mem) {
        if (l >= r) {
            return 0;
        }
        if (mem[l][r] != -1) {
            return mem[l][r];
        }

        int res = Integer.MAX_VALUE;
        for (int k = l; k < r; k++) {
            int currCost = d[l - 1] * d[k] * d[r] + mcm(d, l, k, mem) + mcm(d, k + 1, r, mem);
            res = Math.min(res, currCost);
        }

        mem[l][r] = res;
        return res;
    }

    public static void main(String[] args) {
        int[] d = {10, 20, 30, 40, 30}; // Example matrix dimensions
        int n = d.length;
        int[][] mem = new int[n][n];
        
        // Initialize memoization table with -1
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                mem[i][j] = -1;
            }
        }

        System.out.println("Minimum number of multiplications: " + mcm(d, 1, n - 1, mem));
    }
}


#python
def mcm(d, l, r, mem):
    if l >= r:
        return 0
    if mem[l][r] != -1:
        return mem[l][r]

    res = float('inf')
    for k in range(l, r):
        currCost = d[l - 1] * d[k] * d[r] + mcm(d, l, k, mem) + mcm(d, k + 1, r, mem)
        res = min(res, currCost)

    mem[l][r] = res
    return res

# Example usage
d = [10, 20, 30, 40, 30]  # Example matrix dimensions
n = len(d)
mem = [[-1 for _ in range(n)] for _ in range(n)]

print("Minimum number of multiplications:", mcm(d, 1, n - 1, mem))
